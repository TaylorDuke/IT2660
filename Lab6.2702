import java.util.*;

public class Exercise27_01 {
    /** Main method */
    public static void main(String[] args) {
        MyQuadraticProbingHashMap<Integer, Integer> map = new MyQuadraticProbingHashMap<>();
        Scanner input = new Scanner(System.in);

        System.out.print("Enter integer keys, input ends with a negative value: ");
        int key = input.nextInt();
        while (key >= 0) {
            map.put(key, key);
            key = input.nextInt();
        }

        System.out.print("Enter key1: ");
        int key1 = input.nextInt();
        System.out.println("Is " + key1 + " in the map? " + map.containsKey(key1));

        System.out.print("Enter key2: ");
        int key2 = input.nextInt();
        System.out.println("Is " + key2 + " in the map? " + map.containsKey(key2));

        System.out.println("The map size is " + map.size());

        map.remove(2);
        System.out.println("After removing key 2 from the map, is key 2 in the map? " + map.containsKey(2));
        System.out.println("The map size is " + map.size());
    }
}

interface MyMap<K, V> {
    /** Remove all of the entries from this map */
    void clear();

    /** Return true if the specified key is in the map */
    boolean containsKey(K key);

    /** Return true if this map contains the specified value */
    boolean containsValue(V value);

    /** Return a set of entries in the map */
    java.util.Set<Entry<K, V>> entrySet();

    /** Return the first value that matches the specified key */
    V get(K key);

    /** Return true if this map contains no entries */
    boolean isEmpty();

    /** Return a set consisting of the keys in this map */
    java.util.Set<K> keySet();

    /** Add an entry (key, value) into the map */
    V put(K key, V value);

    /** Remove the entries for the specified key */
    void remove(K key);

    /** Return the number of mappings in this map */
    int size();

    /** Return a set consisting of the values in this map */
    java.util.Set<V> values();

    /** Define inner class for Entry */
    class Entry<K, V> {
        K key;
        V value;

        public Entry(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() {
            return key;
        }

        public V getValue() {
            return value;
        }

        @Override
        public String toString() {
            return "[" + key + ", " + value + "]";
        }
    }
}

class MyQuadraticProbingHashMap<K, V> implements MyMap<K, V> {
    private static final int DEFAULT_INITIAL_CAPACITY = 4;
    private static final float DEFAULT_LOAD_FACTOR = 0.5f;

    private int capacity;
    private float loadFactorThreshold;
    private int size = 0;
    private MyMap.Entry<K, V>[] table;

    // Constructor
    public MyQuadraticProbingHashMap() {
        this.capacity = DEFAULT_INITIAL_CAPACITY;
        this.loadFactorThreshold = DEFAULT_LOAD_FACTOR;
        @SuppressWarnings("unchecked")
        MyMap.Entry<K, V>[] tempTable = new MyMap.Entry[capacity];
        this.table = tempTable;
    }

    @Override
    public void clear() {
        size = 0;
        @SuppressWarnings("unchecked")
        MyMap.Entry<K, V>[] tempTable = new MyMap.Entry[capacity];
        this.table = tempTable;
    }

    @Override
    public boolean containsKey(K key) {
        return get(key) != null;
    }

    @Override
    public boolean containsValue(V value) {
        for (int i = 0; i < table.length; i++) {
            if (table[i] != null && table[i].value.equals(value)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Set<MyMap.Entry<K, V>> entrySet() {
        Set<MyMap.Entry<K, V>> set = new HashSet<>();
        for (MyMap.Entry<K, V> entry : table) {
            if (entry != null) {
                set.add(entry);
            }
        }
        return set;
    }

    @Override
    public V get(K key) {
        int index = hash(key.hashCode());
        int i = 0; // Quadratic probing starts with 0
        while (table[(index + i * i) % capacity] != null) {
            int pos = (index + i * i) % capacity;
            if (table[pos].key.equals(key)) {
                return table[pos].value;
            }
            i++;
        }
        return null;
    }

    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public Set<K> keySet() {
        Set<K> keys = new HashSet<>();
        for (MyMap.Entry<K, V> entry : table) {
            if (entry != null) {
                keys.add(entry.key);
            }
        }
        return keys;
    }

    @Override
    public V put(K key, V value) {
        if (size >= capacity * loadFactorThreshold) {
            rehash();
        }

        int index = hash(key.hashCode());
        int i = 0; // Quadratic probing starts with 0
        while (table[(index + i * i) % capacity] != null &&
                table[(index + i * i) % capacity].key != null &&
                !table[(index + i * i) % capacity].key.equals(key)) {
            i++;
        }

        int pos = (index + i * i) % capacity;
        if (table[pos] == null || table[pos].key == null) {
            table[pos] = new MyMap.Entry<>(key, value);
            size++;
        } else {
            table[pos].value = value; // Update the value if the key already exists
        }

        return value;
    }

    @Override
    public void remove(K key) {
        int index = hash(key.hashCode());
        int i = 0;
        while (table[(index + i * i) % capacity] != null) {
            int pos = (index + i * i) % capacity;
            if (table[pos].key.equals(key)) {
                table[pos] = new MyMap.Entry<>(null, null); // Mark as deleted
                size--;
                break;
            }
            i++;
        }
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public Set<V> values() {
        Set<V> values = new HashSet<>();
        for (MyMap.Entry<K, V> entry : table) {
            if (entry != null) {
                values.add(entry.value);
            }
        }
        return values;
    }

    private int hash(int hashCode) {
        return Math.abs(hashCode % capacity);
    }

    private void rehash() {
        Set<MyMap.Entry<K, V>> entries = entrySet();
        capacity *= 2;
        @SuppressWarnings("unchecked")
        MyMap.Entry<K, V>[] tempTable = new MyMap.Entry[capacity];
        this.table = tempTable;
        size = 0;

        for (MyMap.Entry<K, V> entry : entries) {
            put(entry.key, entry.value);
        }
    }
}
